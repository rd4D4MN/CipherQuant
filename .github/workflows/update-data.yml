name: Update Finance Data

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-database:
    runs-on: self-hosted  # Use your local runner instead of GitHub's cloud servers

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install yfinance psycopg2-binary python-dotenv

      - name: Set UTF-8 Encoding (Windows Fix)
        run: chcp 65001
        shell: cmd

      - name: Load Environment Variables and Test Database Connection
        run: |
          python -c "
          import os
          import psycopg2
          from dotenv import load_dotenv
      
          # Ensure we are in the correct directory
          print('Current working directory:', os.getcwd())
      
          # Explicitly set the path for .env
          dotenv_path = os.path.join(os.getcwd(), '.env')
      
          # Check if .env exists before loading
          if os.path.exists(dotenv_path):
              print('✅ .env file found, loading...')
              load_dotenv(dotenv_path=dotenv_path)
          else:
              print('❌ ERROR: .env file NOT FOUND at:', dotenv_path)
              exit(1)
      
          # Debugging: Print loaded environment variables (excluding password)
          print('Loaded DB_HOST:', os.getenv('DB_HOST'))
          print('Loaded DB_PORT:', os.getenv('DB_PORT'))
          print('Loaded DB_USER:', os.getenv('DB_USER'))
          print('Loaded DB_NAME:', os.getenv('DB_NAME'))
          print('DB_PASSWORD is loaded:', bool(os.getenv('DB_PASSWORD')))  # True if password exists
      
          try:
              conn = psycopg2.connect(
                  host=os.getenv('DB_HOST'),
                  port=os.getenv('DB_PORT'),
                  user=os.getenv('DB_USER'),
                  password=os.getenv('DB_PASSWORD'),
                  dbname=os.getenv('DB_NAME')
              )
              print('✅ Successfully connected to local PostgreSQL.')
              conn.close()
          except Exception as e:
              print(f'❌ Failed to connect: {e}')
              exit(1)
          "
        shell: powershell
      

      - name: Run Data Population Script
        run: python scripts/populate_historical_data.py
        shell: powershell
