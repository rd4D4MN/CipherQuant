name: Update Finance Data

on:
  workflow_dispatch:  # Allows manual trigger
  schedule:
    - cron: '0 16 26 * *'  # Run every day at midnight


jobs:
  update-database:
    runs-on: [self-hosted, update-data]  # Use your local runner, use update-data label

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set UTF-8 Encoding (Windows Fix)
        run: chcp 65001
        shell: powershell

      - name: Set Up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Install Dependencies
        run: pip install yfinance psycopg2-binary python-dotenv
      
      - name: Mask DB Password in Logs (GitHub Actions Security)
        run: echo "::add-mask::$(echo ${{ secrets.DB_PASSWORD }})"
        shell: powershell

      - name: Copy .env File to Runner Directory
        run: |
          Copy-Item "$HOME/Documents/Projects/CipherQuant/.env" -Destination "$env:GITHUB_WORKSPACE/"
        shell: powershell

      - name: Set UTF-8 Encoding for PowerShell
        run: |
          [Console]::OutputEncoding = [System.Text.Encoding]::UTF8
        shell: powershell     

      - name: Load Environment Variables and Test Database Connection
        run: |
          python -c "
          import os
          import sys
          import psycopg2
          from dotenv import load_dotenv
      
          # Ensure UTF-8 encoding
          sys.stdout.reconfigure(encoding='utf-8')
      
          # Ensure we are in the correct directory
          print('Current working directory:', os.getcwd())

          # Explicitly set the path for .env
          dotenv_path = os.path.join(os.getcwd(), '.env')

          # Check if .env exists before loading
          if os.path.exists(dotenv_path):
              print('✅ .env file found, loading...')
              load_dotenv(dotenv_path=dotenv_path)
          else:
              print('❌ ERROR: .env file NOT FOUND at:', dotenv_path)
              exit(1)

          # Debugging: Print loaded environment variables (excluding password)
          print('Loaded DB_HOST:', os.getenv('DB_HOST'))
          print('Loaded DB_PORT:', os.getenv('DB_PORT'))
          print('Loaded DB_USER:', os.getenv('DB_USER'))
          print('Loaded DB_NAME:', os.getenv('DB_NAME'))
          print('DB_PASSWORD is loaded:', bool(os.getenv('DB_PASSWORD')))  # True if password exists

          try:
              conn = psycopg2.connect(
                  host=os.getenv('DB_HOST'),
                  port=os.getenv('DB_PORT'),
                  user=os.getenv('DB_USER'),
                  password=os.getenv('DB_PASSWORD'),
                  dbname=os.getenv('DB_NAME')
              )
              print('✅ Successfully connected to local PostgreSQL.')
              conn.close()
          except Exception as e:
              # Mask the password in logs before printing
              error_message = str(e).replace(os.getenv('DB_PASSWORD', ''), '[HIDDEN]')
              print(f'❌ Failed to connect: {error_message}')
              exit(1)
          "
        shell: powershell
      
      - name: Run Data Population Script
        run: python scripts/populate_historical_data.py
        shell: powershell
